package views;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import java.sql.ResultSet;

import salecat.global;
import database.permitDB;
import database.userDB;
/**
 *
 * @author axdevil
 */
public class createUser extends javax.swing.JPanel {

    JFrame menuW;
    
    /**
     * Creates new form create
     */
    public createUser(JFrame menu) {
        initComponents();
        
        this.menuW = menu;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        password = new javax.swing.JPasswordField();
        confirmPasswordTitle = new javax.swing.JLabel();
        confirmPassword = new javax.swing.JPasswordField();
        titlePermit = new javax.swing.JLabel();
        product = new javax.swing.JCheckBox();
        sale = new javax.swing.JCheckBox();
        inventory = new javax.swing.JCheckBox();
        provider = new javax.swing.JCheckBox();
        save = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        nameTitle = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        cancel = new javax.swing.JButton();
        passwordTitle = new javax.swing.JLabel();

        password.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        confirmPasswordTitle.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        confirmPasswordTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        confirmPasswordTitle.setText("Confirmar:");

        confirmPassword.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        titlePermit.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        titlePermit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlePermit.setText("Permisos");

        product.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        product.setText("Productos");

        sale.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        sale.setText("Ver ventas");

        inventory.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        inventory.setText("Inventario");

        provider.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        provider.setText("Proveedores");

        save.setBackground(new java.awt.Color(41, 121, 255));
        save.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Guardar");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Nuevo usuario");

        nameTitle.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        nameTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameTitle.setText("Nombre:");

        name.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        cancel.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        cancel.setText("Cancelar");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        passwordTitle.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        passwordTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passwordTitle.setText("Contrase√±a:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(titlePermit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(nameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(passwordTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(password, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(name, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(confirmPasswordTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(confirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(product, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sale, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inventory, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(provider, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(title)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(name)
                    .addComponent(nameTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(confirmPassword)
                    .addComponent(confirmPasswordTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addComponent(titlePermit)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(product)
                    .addComponent(sale))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inventory)
                    .addComponent(provider))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(save))
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        global.validation(nameTitle, false);
        global.validation(passwordTitle, false);
        global.validation(confirmPasswordTitle, false);
        
        if(name.getText().length() == 0){
            global.validation(nameTitle, true);
        }else if(password.getPassword().length == 0){
            global.validation(passwordTitle, true);
        }else if(confirmPassword.getPassword().length == 0){
            global.validation(confirmPasswordTitle, true);
        }else if(!String.valueOf(confirmPassword.getPassword()).equals(String.valueOf(password.getPassword()))){
            JOptionPane.showMessageDialog(null, "Las contrase√±as no coinciden","Advertencia",1);
        }else{
            try {
                boolean exist = false;
                ResultSet query = userDB.getByName(name.getText());
                while(query.next()){
                    exist = true;
                }
                if(!exist){
                    userDB.add(name.getText(), String.valueOf(password.getPassword()));
                    
                    boolean[] permits = new boolean[4];
                    
                    if(product.getSelectedObjects() != null){
                        permits[0] = true;
                    }else{
                        permits[0] = false;
                    }
                    if(sale.getSelectedObjects() != null){
                        permits[1] = true;
                    }else{
                        permits[1] = false;
                    }
                    if(inventory.getSelectedObjects() != null){
                        permits[2] = true;
                    }else{
                        permits[2] = false;
                    }
                    if(provider.getSelectedObjects() != null){
                        permits[3] = true;
                    }else{
                        permits[3] = false;
                    }
                    
                    int maxId = 1;
                    ResultSet id = userDB.getMaxId();
                    id.next();
                    maxId = id.getInt("id");
                    
                    permitDB.add(permits[0], permits[1], permits[2], permits[3], maxId);
                    
                    returnSettings();
                }else{
                    JOptionPane.showMessageDialog(null, "Ya existe un usuario con ese nombre","Aviso",1);
                    global.validation(nameTitle, true);
                }
            } catch (SQLException ex) {
                Logger.getLogger(createUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        returnSettings();
    }//GEN-LAST:event_cancelActionPerformed
    
    private void returnSettings(){
        menu.changeContent(new settings(menuW), "Configuraci√≥n", null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JPasswordField confirmPassword;
    private javax.swing.JLabel confirmPasswordTitle;
    private javax.swing.JCheckBox inventory;
    public static javax.swing.JTextField name;
    private javax.swing.JLabel nameTitle;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel passwordTitle;
    private javax.swing.JCheckBox product;
    private javax.swing.JCheckBox provider;
    private javax.swing.JCheckBox sale;
    private javax.swing.JButton save;
    private javax.swing.JLabel title;
    private javax.swing.JLabel titlePermit;
    // End of variables declaration//GEN-END:variables
}
